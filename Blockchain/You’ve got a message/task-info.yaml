type: edu
custom_name: stage4
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Locale;
    import java.util.Objects;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static ArrayList<String> minerIds;
        static ArrayList<String> dataStrs;


        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                    && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                    .lines()
                    .map(String::strip)
                    .filter(e -> e.length() > 0)
                    .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                        "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                        "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                        "should start with \"Created by\"");
            }

            minerIds.add(lines.get(1));

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                        "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                    .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                        "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                        "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                        "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                        "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                    || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                        "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                        "should start with \"Block data:\"");
            }

            int i;
            StringBuilder dataStr = new StringBuilder(lines.get(9));
            for (i=10; i < lines.size(); i++){
                if (lines.get(i).toLowerCase().contains("block") && lines.get(i).toLowerCase().contains("generating")){
                    break;
                }
                dataStr.append(lines.get(i));
            }
            dataStrs.add(dataStr.toString());

            if (!lines.get(i).toLowerCase().contains("block") && !lines.get(i).toLowerCase().contains("generating")){
                throw new BlockParseException("Second-last line of every block " +
                        "should say how long the block was generating for! (Use the example's format)");
            }

            if (i + 1 >= lines.size()){
                throw new BlockParseException("There should be two lines after the block data.. " +
                        "one for generating time and one for N's status update.");
            }

            if (!lines.get(i+1).toUpperCase().startsWith("N ")) {
                throw new BlockParseException("11-th line of every block " +
                        "should be state what happened to N in the format given.");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            minerIds = new ArrayList<String>();
            dataStrs = new ArrayList<String>();

            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            String firstMiner = minerIds.get(0);
            minerIds.removeIf(s -> Objects.equals(s, firstMiner));
            if (minerIds.size() == 0){
                throw new BlockParseException("All blocks are mined by a single miner!");
            }

            String firstData = dataStrs.get(0);
            dataStrs.removeIf(s -> Objects.equals(s, firstData));
            if (dataStrs.size() == 0){
                throw new BlockParseException("All blocks contain the same data!");
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    new TestCase<>(),
                    new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                        "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                        "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                            "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                            "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                            "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Blockchain.java
  visible: true
  text: |
    package blockchain;

    import blockchain.model.Block;
    import java.util.Deque;
    import java.util.LinkedList;

    public class Blockchain {

        private static final Blockchain INSTANCE = new Blockchain();

        private final Deque<Block> blockDeque = new LinkedList<>();

        private int complexity = 0;

        private Blockchain() {
        }

        public static Blockchain getInstance() {
            return INSTANCE;
        }

        public int size() {
            return blockDeque.size();
        }

        public Block getTail() {
            return blockDeque.peekLast();
        }

        public int getComplexity() {
            return complexity;
        }

        public void push(Block block) {

            if (isValid(block)) {
                adjustComplexity(block);
                blockDeque.add(block);
            }
        }

        public void adjustComplexity(Block b) {

            if (b.getCreationDuration() < 10 || blockDeque.isEmpty()) {
                complexity++;
                b.setOutcome("N was increased to " + complexity);
            } else if (b.getCreationDuration() > 60 && complexity > 0) {
                complexity--;
                b.setOutcome("N was decreased by 1");
            } else {
                b.setOutcome("N stays the same");
            }
        }

        public boolean isValid(Block block) {
            return blockDeque.isEmpty() || block.isChainedWith(getTail());
        }

        public String getLatestHash() {
            return blockDeque.isEmpty() ? "0" : getTail().getHash();
        }
    }
  learner_created: true
- name: src/blockchain/utils/BlockchainUtils.java
  visible: true
  text: |
    package blockchain.utils;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;
    import java.util.concurrent.ThreadLocalRandom;

    public class BlockchainUtils {

        public static final int NUMBER_OF_BLOCKS = 5;

        public static long generateMagicNumber() {
            final long max = 99999999;
            final long min = 10000000;
            return ThreadLocalRandom.current().nextLong(min, max);
        }

        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes(StandardCharsets.UTF_8));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if (hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }

                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/domain/NumberGenerator.java
  visible: true
  text: |
    package blockchain.domain;

    public class NumberGenerator {

        private static final NumberGenerator instance = new NumberGenerator();
        private volatile int value = 0;

        public static NumberGenerator getInstance() {
            return instance != null ? instance : new NumberGenerator();
        }

        public synchronized int next() {
            return ++value;
        }
    }
  learner_created: true
- name: src/blockchain/model/Block.java
  visible: true
  text: |
    package blockchain.model;

    import java.util.Objects;

    public class Block {

        private final long id;
        private final String miner;
        private final long timeStamp;
        private final long magicNumber;
        private final String hashPreviousBlock;
        private final String hash;
        private long creationDuration;
        private String outcome;

        public Block(String miner, long id, long timeStamp, long magicNumber, String hashPreviousBlock, String hash) {
            super();
            this.miner = miner;
            this.id = id;
            this.timeStamp = timeStamp;
            this.magicNumber = magicNumber;
            this.hashPreviousBlock = hashPreviousBlock;
            this.hash = hash;
        }

        public long getId() {
            return id;
        }

        public long getTimeStamp() {
            return timeStamp;
        }

        public String getHashPreviousBlock() {
            return hashPreviousBlock;
        }

        public String getHash() {
            return hash;
        }

        public void setCreationDuration(long duration) {
            this.creationDuration = duration;
        }

        public long getCreationDuration() {
            return creationDuration;
        }

        public void setOutcome(String outcome) {
            this.outcome = outcome;
        }

        public boolean isChainedWith(Block block) {
            return hashPreviousBlock.equals(block.getHash());
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Block)) return false;
            Block block = (Block) o;
            return getId() == block.getId() && getTimeStamp() == block.getTimeStamp() && magicNumber == block.magicNumber
                    && getCreationDuration() == block.getCreationDuration() && Objects.equals(miner, block.miner) &&
                    Objects.equals(getHashPreviousBlock(), block.getHashPreviousBlock()) &&
                    Objects.equals(getHash(), block.getHash()) && Objects.equals(outcome, block.outcome);
        }

        @Override
        public int hashCode() {
            return Objects.hash(getId(), miner, getTimeStamp(), magicNumber, getHashPreviousBlock(), getHash(), getCreationDuration(), outcome);
        }

        @Override
        public String toString() {
            return "Block:\n" +
                    "Created by " + miner +
                    "\nId: " + id +
                    "\nTimestamp: " + timeStamp +
                    "\nMagic number: " + magicNumber +
                    "\nHash of the previous block:\n" + hashPreviousBlock +
                    "\nHash of the block:\n" + hash +
                    "\nBlock was generating for " + creationDuration + " milliseconds" +
                    "\n" + outcome + "\n";
        }
    }
  learner_created: true
- name: src/blockchain/domain/BlockMiner.java
  visible: true
  text: |
    package blockchain.domain;

    import blockchain.Blockchain;
    import blockchain.model.Block;

    import java.util.Date;
    import java.util.concurrent.Callable;

    public class BlockMiner implements Callable<Block> {

        private final Blockchain blockchain = Blockchain.getInstance();
        private final int minerId;

        public BlockMiner(int minerId) {
            this.minerId = minerId;
        }

        public Block mine() {

            long startTime = System.currentTimeMillis();

            Block block = BlockBuilder.init()
                    .withMiner("miner # " + minerId)
                    .withId(blockchain.size() + 1)
                    .withTimeStamp(new Date().getTime())
                    .withHashPreviousBlock(blockchain.getLatestHash())
                    .generateHash(blockchain.getComplexity())
                    .createBlock();

            long duration = System.currentTimeMillis() - startTime;
            block.setCreationDuration(duration);

            return block;
        }

        @Override
        public Block call() {
            return mine();
        }
    }
  learner_created: true
- name: src/blockchain/domain/BlockBuilder.java
  visible: true
  text: |
    package blockchain.domain;

    import blockchain.model.Block;
    import blockchain.utils.BlockchainUtils;

    public class BlockBuilder {

        private String miner;
        private long id;
        private long magicNumber;
        private long timeStamp;
        private String hashPreviousBlock;
        private String hash;

        private BlockBuilder() {
        }

        public static BlockBuilder init() {
            return new BlockBuilder();
        }

        public BlockBuilder withMiner(String miner) {
            this.miner = miner;
            return this;
        }

        public BlockBuilder withId(int id) {
            this.id = id;
            return this;
        }

        public BlockBuilder withTimeStamp(long timeStamp) {
            this.timeStamp = timeStamp;
            return this;
        }

        public BlockBuilder withHashPreviousBlock(String hashPreviousBlock) {
            this.hashPreviousBlock = hashPreviousBlock;
            return this;
        }

        public BlockBuilder generateHash(int numberOfZeros) {
            magicNumber = BlockchainUtils.generateMagicNumber();
            String input = id + timeStamp + hashPreviousBlock;
            hash = BlockchainUtils.applySha256(input + magicNumber);

            String startingZeros = "0".repeat(numberOfZeros);

            while (!hash.startsWith(startingZeros)) {
                magicNumber = BlockchainUtils.generateMagicNumber();
                hash = BlockchainUtils.applySha256(input + magicNumber);
            }

            return this;
        }

        public Block createBlock() {
            return new Block(miner, id, timeStamp, magicNumber, hashPreviousBlock, hash);
        }
    }
  learner_created: true
- name: src/blockchain/domain/MessageCollector.java
  visible: true
  learner_created: true
- name: src/blockchain/domain/MessageFormatter.java
  visible: true
  learner_created: true
- name: src/blockchain/model/User.java
  visible: true
  learner_created: true
- name: src/blockchain/domain/MessageSender.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5416#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 07 Jan 2023 21:24:01 UTC
record: 4
